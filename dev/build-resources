#!/usr/bin/env node

var	PROD = (process.env.NODE_ENV === "production"),

	path = require("path"),
	fs = require("fs"),
	zlib = require("zlib"),
	crypto = require("crypto"),
	args = require("minimist")(process.argv.slice(2)),
	ugly = require("uglify-js"),
	watch = require("watch"),
	mkdirp = require("mkdirp"),

	grips = require("grips")[
		// either pull in production or debug of grips engine
		PROD ? "grips" : "debug"
	],

	Tmpls,

	DIR_ROOT = global.DIR_ROOT = __dirname,

	DIR_WEB = path.join(DIR_ROOT,"web"),
	DIR_WEB_HTML = path.join(DIR_WEB,"html"),
	DIR_WEB_JS = path.join(DIR_WEB,"js"),
	DIR_WEB_CSS = path.join(DIR_WEB,"css"),
	DIR_WEB_IMAGES = path.join(DIR_WEB,"images"),

	DIR_TEMPLATES = path.join(DIR_ROOT,"templates"),
	DIR_TEMPLATES_HTML = path.join(DIR_TEMPLATES,"html"),
	DIR_TEMPLATES_CSS = path.join(DIR_TEMPLATES,"css"),
	DIR_TEMPLATES_JS = path.join(DIR_TEMPLATES,"js"),
	DIR_TEMPLATES_CACHE = path.join(DIR_TEMPLATES,"cache"),

	FILE_TEMPLATE_BUNDLE_WRAPPER = path.join(DIR_TEMPLATES,"tmpls-wrapper.js"),
	FILE_TEMPLATE_BUNDLE = path.join(DIR_WEB_JS,"Tmpls.js"),

	FILE_LOADJS_TEMPLATE = path.join(DIR_TEMPLATES_JS,"grips.load.js"),
	FILE_LOADJS_DATA = path.join(DIR_TEMPLATES,"load.js.json"),
	FILE_LOADJS = path.join(DIR_WEB_JS,"load.js"),

	UMASK = 7, // 0o007
	DIR_PERMS = 504, // 0o770
	FILE_PERMS = 416 // 0o640
;

global.grips = grips;
grips.css = require("grips/css/node-base.js")[
	// either pull in production or debug of grips-css engine
	PROD ? "grips-css" : "debug"
];

process.umask(UMASK);
everything();

// setup watches
if (args.watch) {
	console.log("Watching for updates...");

	watch.createMonitor(
		/*root=*/DIR_TEMPLATES_HTML,
		/*options=*/{
			ignoreUnreadableDir: true,
			ignoreNotPermitted: true
		},
		/*handler=*/function handler(monitor) {
			monitor.on("created",updateTemplates);
			monitor.on("changed",updateTemplates);
		}
	);
	watch.createMonitor(
		/*root=*/DIR_TEMPLATES_CSS,
		/*options=*/{
			ignoreUnreadableDir: true,
			ignoreNotPermitted: true
		},
		/*handler=*/function handler(monitor) {
			monitor.on("created",updateTemplates);
			monitor.on("changed",updateTemplates);
		}
	);
	watch.createMonitor(
		/*root=*/DIR_TEMPLATES,
		/*options=*/{
			ignoreUnreadableDir: true,
			ignoreNotPermitted: true,
			ignoreDirectoryPattern: /cache/,
			filter: function filter(filepath) {
				// only monitor CSS template data files
				return /\.css\.json$/.test(filepath)
			}
		},
		/*handler=*/function handler(monitor) {
			monitor.on("created",renderCSSFile);
			monitor.on("changed",renderCSSFile);
		}
	);
	watch.createMonitor(
		/*root=*/DIR_TEMPLATES,
		/*options=*/{
			ignoreUnreadableDir: true,
			ignoreNotPermitted: true,
			ignoreDirectoryPattern: /cache/,
			filter: function filter(filepath) {
				// only monitor the load.js template
				// and its data file
				return (
					filepath == DIR_TEMPLATES_JS ||
					filepath == FILE_LOADJS_TEMPLATE ||
					filepath == FILE_LOADJS_DATA
				);
			}
		},
		/*handler=*/function handler(monitor) {
			monitor.on("created",buildLoadJS);
			monitor.on("changed",buildLoadJS);
		}
	);

	if (PROD) {
		watch.createMonitor(
			/*root=*/DIR_WEB_JS,
			/*options=*/{
				ignoreUnreadableDir: true,
				ignoreNotPermitted: true,
				ignoreDirectoryPattern: /external/,
				filter: function filter(filepath) {
					return (
						/\.js(on)?$/.test(filepath) &&
						!/\.min\.js(on)?$/.test(filepath)
					);
				}
			},
			/*handler=*/function handler(monitor) {
				monitor.on("created",minifyJSFile);
				monitor.on("changed",minifyJSFile);
			}
		);
		watch.createMonitor(
			/*root=*/DIR_WEB,
			/*options=*/{
				ignoreUnreadableDir: true,
				ignoreNotPermitted: true,
				filter: function filter(filepath) {
					return /\.js$/.test(filepath);
				}
			},
			/*handler=*/function handler(monitor) {
				monitor.on("created",minifyJSFile);
				monitor.on("changed",minifyJSFile);
			}
		);
		watch.createMonitor(
			/*root=*/DIR_WEB,
			/*options=*/{
				ignoreUnreadableDir: true,
				ignoreNotPermitted: true,
				filter: function filter(filepath) {
					return !(
						/\.gz$/.test(filepath) ||
						(
							/\/images\//.test(filepath) &&
							!/\.svg$/.test(filepath)
						)
					);
				}
			},
			/*handler=*/function handler(monitor) {
				monitor.on("created",gzipFile);
				monitor.on("changed",gzipFile);
			}
		);
	}
}


// ********************************************


function everything() {
	preamble();

	buildTemplates();
	bundleTemplates();
	renderTemplates();

	buildLoadJS();

	if (PROD) {
		minifyWebJSFiles(
			collectFilepaths(
				/*dir=*/DIR_WEB_JS,
				/*matching=*/[
					/\.js(on)?$/
				],
				/*notmatching=*/[
					/\.min\.js(on)?$/,
					/\/external\//
				]
			)
		);
		gzipWebFiles(
			collectFilepaths(
				/*dir=*/DIR_WEB,
				/*matching=*/null,
				/*notmatching=*/[
					/\.gz$/,
					/\/images\//
				]
			)
		);
		gzipWebFiles(
			collectFilepaths(
				/*dir=*/DIR_WEB_IMAGES,
				/*matching=*/[
					/\.svg$/
				]
			)
		);
	}

	console.log("Done building resources.");
}

function preamble() {
	if (PROD) {
		console.log("*** Building production resources ***");
	}
	else {
		console.log("*** Building dev resources ***");
	}
}

function matcher(matching,value) {
	if (matching && matching.length > 0) {
		return matching.some(function somer(match){
			if (typeof match == "string") return match == value;
			else if (match) return match.test(value);
			return true;
		});
	}
	return true;
}

function collectionCacheDir(collectionID) {
	return path.join(DIR_TEMPLATES_CACHE,
		collectionID.replace(/^\//,"").replace(/\//g,"_")
	);
}

function cacheFile(contents,filename,collectionID) {
	try {
		var dir = collectionCacheDir(collectionID);

		if (!fs.existsSync(dir)) {
			mkdirp.sync(dir,DIR_PERMS);
		}
		var filepath = path.join(dir,filename);
		fs.writeFileSync(filepath,contents,{ encoding: "utf8", mode: FILE_PERMS });
	}
	catch (err) { }
}

function collectTemplateFiles(baseDir,relativeDir,matching,readContents) {
	var dir = path.join(baseDir,relativeDir);
		filenames = fs.readdirSync(dir),
		list = [];

	matching = matching || [];

	filenames.forEach(function eacher(filename){
		var st = fs.statSync(path.join(dir,filename)),
			contents
		;

		// matching file to collect?
		if (st.isFile() && matcher(matching,filename)) {
			if (readContents) {
				contents = fs.readFileSync(path.join(dir,filename),{ encoding: "utf8" });
			}
			list.push({
				dir: relativeDir,
				filename: filename,
				contents: contents
			});
		}
		// recurse into directory?
		else if (st.isDirectory()) {
			list = list.concat(
				collectTemplateFiles(
					/*baseDir=*/baseDir,
					/*relativeDir=*/path.join(relativeDir,filename),
					/*matching=*/matching,
					/*readContents=*/readContents
				)
			);
		}
	});

	return list;
}

function compileTemplate(contents,type,collectionID) {
	try {
		if (type == "text") {
			return grips.compileCollection(
				/*source=*/contents,
				/*collectionID=*/collectionID,
				/*initialize=*/false
			);
		}
		else if (type == "gcss") {
			return grips.css.compileFile(
				/*source=*/contents,
				/*collectionID=*/collectionID,
				/*initialize=*/false
			);
		}
	}
	catch (err) {
		console.error(err.stack || err.toString());
		process.exit(1);
	}
}

function compileTemplates(files,type) {
	return files.map(function mapper(listing){
		console.log("Compiling template: " + listing.collection_id);

		listing.processed = compileTemplate(
			/*contents=*/listing.contents,
			/*type=*/type,
			/*collectionID=*/listing.collection_id
		);

		return listing;
	});
}

function generateTemplateCollectionID(listing) {
	listing.collection_id =
		(listing.dir != "" ? "/" + listing.dir : "") +
		"/" + listing.filename.replace(/^grips\./,"");

	return listing;
}

function processCompiledHTMLTemplate(listing) {
	// cache compiled template
	cacheFile(listing.processed,"js",listing.collection_id);
}

function processCompiledCSSTemplate(listing){
	// cache compiled CSS grips template
	cacheFile(listing.processed,"grips",listing.collection_id);

	listing.processed = compileTemplate(
		/*contents=*/listing.processed,
		/*type=*/"text",
		/*collectionID=*/listing.collection_id
	);

	// cache compiled template
	cacheFile(listing.processed,"js",listing.collection_id);
}

function buildTemplates(html,css) {
	html = html || collectTemplateFiles(
		/*baseDir=*/DIR_TEMPLATES_HTML,
		/*relativeDir=*/"",
		/*matching=*/[ /^grips\./ ],
		/*readContents=*/true
	);
	css = css || collectTemplateFiles(
		/*baseDir=*/DIR_TEMPLATES_CSS,
		/*relativeDir=*/"",
		/*matching=*/[ /^grips\./ ],
		/*readContents=*/true
	);

	// process meta data and cache original template
	html = html.map(function mapper(listing){
		generateTemplateCollectionID(listing);

		// cache original template
		cacheFile(listing.contents,"grips",listing.collection_id);

		return listing;
	});
	css = css.map(function mapper(listing){
		generateTemplateCollectionID(listing);

		// cache original template
		cacheFile(listing.contents,"gcss",listing.collection_id);

		return listing;
	});

	// compile html templates
	compileTemplates(
		/*files=*/html,
		/*type=*/"text"
	)
	.map(processCompiledHTMLTemplate);

	// compiled css templates
	compileTemplates(
		/*files=*/css,
		/*type=*/"gcss"
	)
	.map(processCompiledCSSTemplate);
}

function bundleTemplates() {
	var bundle_str, bundle_wrapper;

	console.log("Bundling templates:",FILE_TEMPLATE_BUNDLE);

	// collect js templates into template bundle
	bundle_str = collectTemplateFiles(
			/*baseDir=*/DIR_TEMPLATES_CACHE,
			/*relativeDir=*/"",
			/*matching=*/[ /^js$/ ],
			/*readContents=*/true
		)
		.map(function mapper(listing){
			return listing.contents;
		})
		.join("");

	// wrap template bundle
	bundle_wrapper =
		fs.readFileSync(FILE_TEMPLATE_BUNDLE_WRAPPER,{ encoding: "utf8" })
		.replace(/\/\*TEMPLATES\*\//,function replacer(){ return bundle_str; });

	// write template bundle to file
	fs.writeFileSync(
		FILE_TEMPLATE_BUNDLE,
		bundle_wrapper,
		{ encoding: "utf8", mode: FILE_PERMS }
	);
}

function renderTemplates(collectionIDs) {
	// clear out the grips collection cache
	Object.keys(grips.collections).forEach(function eacher(key){
		delete grips.collections[key];
	});

	// initialize template bundle (for rendering)
	Tmpls = require(FILE_TEMPLATE_BUNDLE);
	Tmpls.init();

	collectionIDs = collectionIDs || Object.keys(grips.collections);

	// process all templates
	collectionIDs
		.forEach(function eacher(collectionID){
			var filename, filepath, contents, data = {},
				data_filename, dir;

			filename = (
					(collectionID == "/") ?
						["index.html"] :
						collectionID.match(/[^\/]+\.(?:html|css)$/)
				)[0];

			data_filename = path.join(DIR_TEMPLATES,filename + ".json");
			if (fs.existsSync(data_filename)) {
				data = JSON.parse(
					fs.readFileSync(data_filename,{ encoding: "utf8" })
				);
			}

			// signal PROD mode to template rendering
			data.PROD = PROD;

			if (/\.html$/.test(filename)) {
				contents = grips.render(collectionID + "#page",data);
				dir = DIR_WEB_HTML;
			}
			else if (/\.css$/.test(filename)) {
				contents = grips.render(collectionID + "#all",{},data);
				dir = DIR_WEB_CSS;
			}

			dir = path.join(dir,collectionID.replace(/[^\/]+\.(?:html|css)$/,""));
			mkdirp.sync(dir,DIR_PERMS);
			filepath = path.join(dir,filename);

			console.log("Rendering template (" + collectionID + ") to",filepath);

			fs.writeFileSync(filepath,contents,{ encoding: "utf8", mode: FILE_PERMS });
		});
}

function buildLoadJS() {
	var contents = fs.readFileSync(
			FILE_LOADJS_TEMPLATE,
			{ encoding: "utf8" }
		),
		load_data = JSON.parse(
			fs.readFileSync(FILE_LOADJS_DATA,{ encoding: "utf8" })
		),
		collection_id = "/load.js";

	console.log("Rendering template (" + collection_id + ") to",FILE_LOADJS);

	// set PROD flag
	load_data.PROD = PROD;

	// rewrite file paths for PROD
	if (PROD) {
		load_data.groups.forEach(function eacher(group){
			group.scripts = group.scripts.map(function mapper(script){
				if (/\/js\/[^\/]+\.js$/.test(script)) {
					return script.replace(/\.js$/,".min.js");
				}
				else if (/grips\.debug\.min\.js$/.test(script)) {
					return script.replace(".debug","");
				}
				return script;
			});
		});
	}

	// compile the load.js template
	grips.compileCollection(
		/*source=*/contents,
		/*collectionID=*/collection_id,
		/*initialize=*/true
	);

	// render load.js contents
	contents = grips.render(collection_id + "#main",load_data);

	// write load.js
	fs.writeFileSync(FILE_LOADJS,contents,{ encoding: "utf8", mode: FILE_PERMS });
}

function collectFilepaths(dir,matching,notmatching) {
	var filenames = fs.readdirSync(dir),
		list = [];

	filenames.forEach(function eacher(filename){
		var st = fs.statSync(path.join(dir,filename));

		// matching file to collect?
		if (st.isFile()) {
			list.push(path.join(dir,filename));
		}
		else if (st.isDirectory()) {
			list = list.concat(
				collectFilepaths(path.join(dir,filename))
			);
		}
	});

	if (matching || notmatching) {
		matching = matching || [];
		notmatching = notmatching || [];

		list = list.filter(function filterer(filepath){
			return (
				matcher(matching,filepath) &&
				(notmatching.length == 0 || !matcher(notmatching,filepath))
			);
		});
	}

	return list;
}

function minifyWebJSFiles(filepaths) {
	filepaths.forEach(function eacher(filepath){
		var filename = (filepath.match(/\/([^\/]+)$/))[1],
			to_filepath = filepath.replace(/\.js$/,".min.js");

		console.log("Minifying (" + filename + ") to:",to_filepath);

		// minify file
		result = ugly.minify(filepath,{
			mangle: true,
			compress: true,
			output: {
				comments: /^!/
			}
		});

		// write minified file
		fs.writeFileSync(
			to_filepath,
			result.code + "\n",
			{ encoding: "utf8", mode: FILE_PERMS }
		);
	});
}

function gzipWebFiles(filepaths) {
	filepaths.forEach(function eacher(filepath){
		var filename = (filepath.match(/\/([^\/]+)$/))[1];

		console.log("Compressing (" + filename + ") to:",filepath + ".gz");

		// gzip the file
		fs.createReadStream(filepath, { encoding: "utf8" })
			.pipe(zlib.createGzip({
				level: zlib.Z_BEST_COMPRESSION
			}))
			.pipe(
				fs.createWriteStream(
					filepath + ".gz",
					{ encoding: "utf8", mode: FILE_PERMS }
				)
			);
	});
}

function calculateMD5s(listing,baseDir,cacheFileName) {
	var dir = collectionCacheDir(listing.collection_id);

	listing.contents = fs.readFileSync(
		path.join(baseDir,listing.dir,listing.filename),
		{ encoding: "utf8" }
	);

	listing.current_md5 = crypto
		.createHash("md5")
		.update(listing.contents,"utf8")
		.digest("hex");

	if (
		fs.existsSync(dir) &&
		fs.existsSync(path.join(dir,cacheFileName))
	) {
		listing.cache_md5 = crypto
			.createHash("md5")
			.update(
				fs.readFileSync(
					path.join(dir,cacheFileName),
					{ encoding: "utf8" }
				),
				"utf8"
			)
			.digest("hex");
	}
}

function updateTemplates() {
	rebuildChangedTemplates();
}

function rebuildChangedTemplates(html,css) {
	html = html || collectTemplateFiles(
			/*baseDir=*/DIR_TEMPLATES_HTML,
			/*relativeDir=*/"",
			/*matching=*/[],
			/*readContents=*/false
		)
		.map(function mapper(listing){
			generateTemplateCollectionID(listing);
			calculateMD5s(listing,DIR_TEMPLATES_HTML,"grips");
			return listing;
		})
		.filter(function filterer(listing){
			return listing.current_md5 != listing.cache_md5;
		});

	css = css || collectTemplateFiles(
			/*baseDir=*/DIR_TEMPLATES_CSS,
			/*relativeDir=*/"",
			/*matching=*/[],
			/*readContents=*/false
		)
		.map(function mapper(listing){
			generateTemplateCollectionID(listing);
			calculateMD5s(listing,DIR_TEMPLATES_CSS,"gcss");
			return listing;
		})
		.filter(function filterer(listing){
			return listing.current_md5 != listing.cache_md5;
		});

	// any templates updated?
	if (html.length > 0 || css.length > 0) {
		// rebuild templates (and cache)
		buildTemplates(html,css);

		// rebuild template bundle
		bundleTemplates();

		// re-render updated templates
		renderTemplates(
			// collect collectionIDs
			html.concat(css).map(function mapper(listing){
				return listing.collection_id;
			})
		);
	}
}

function renderCSSFile() {
	renderTemplates(
		collectTemplateFiles(
			/*baseDir=*/DIR_TEMPLATES_CSS,
			/*relativeDir=*/"",
			/*matching=*/[],
			/*readContents=*/false
		)
		.map(function mapper(listing){
			generateTemplateCollectionID(listing);
			return listing.collection_id;
		})
	);
}

function minifyJSFile(filepath) {
	minifyWebJSFiles([filepath]);
}

function gzipFile(filepath) {
	gzipWebFiles([filepath]);
}
